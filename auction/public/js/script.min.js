'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

$(document).ready(function () {
  $.get('/participants/participantsData', function (res) {
    fillParticipantsTable(res);
    addNewParticipantButtonListener();
    addContextListeners(res);
  });
});

function fillParticipantsTable(res) {
  var participants = [];

  if (res.status !== 404) {
    participants = res.participants;
  }

  var table = $('#body_participants_table');

  var _iterator = _createForOfIteratorHelper(participants),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var participant = _step.value;
      table.append("<tr class=\"participants-tr\">\n                      <td class=\"id\">".concat(participant.id, "</td>\n                      <td class=\"participant-name\">").concat(participant.name, "</td>\n                      <td class=\"participants-money\">").concat(participant.money, "</td>\n                </tr>"));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function addNewParticipantButtonListener() {
  $('#button_add_new_participant').on('click', function () {
    var warn = $('#warn_add_participant');

    if (warn) {
      warn.detach();
    }

    var name = $('#input_participant_name').val();
    var money = $('#input_participant_money').val();

    if (!name || name.length === 0 || !money || money.length === 0 || Number.parseInt(money) < 0) {
      $('#button_add_new_participant').before('<p style="color:red" id="warn_add_participant">Значения введены неправильно!</p>');
    } else {
      var form = $('#form_add_new_participant');
      form.attr({
        method: 'post',
        action: '/participants/new'
      });
      form.submit();
    }
  });
}

function addContextListeners(res) {
  $('.participants-tr').contextmenu(function (event) {
    event.preventDefault(); //запрещаем стандартное меню

    $('#div_context_menu_participant').css({
      display: 'block',
      top: event.clientY,
      left: event.clientX
    });
    var id = $(this).find('.id').text();
    addDeleteListener(id);
    addEditListener(id, res);
  });
  $('body').click(function () {
    $('#div_context_menu_participant').hide();
  });
}

function addDeleteListener(id) {
  $('#form_context_menu_participant_delete').on('click', function () {
    var form = $('#form_context_menu_participant_delete');
    form.attr({
      method: 'post',
      action: '/participants/delete/' + id
    });
    form.submit();
  });
}

function addEditListener(id, res) {
  var participants = res.participants;
  $('#input_edit_participant').on('click', function () {
    var warn = $('#warn_in_participant_modal'); //закрытие параграфа с ошибкой

    if (!warn) {
      warn.detach();
    }

    $('#modal-edit-participant').fadeIn(400);
    var participant = getParticipantById(id, participants);
    $('#name_participant_in_modal').val(participant.name);
    $('#money_participant_in_modal').val(participant.money);
  });
  $('#cancel-edit-participant').on('click', function () {
    $('#modal-edit-participant').hide();
    $('#name_participant_in_modal').val('');
    $('#money_participant_in_modal').val(0);
  });
  $('#ok-edit-participant').on('click', function () {
    var warn = $('#warn_in_participant_modal');

    if (warn) {
      warn.detach();
    }

    var name = $('#name_participant_in_modal').val();
    var money = $('#money_participant_in_modal').val();

    if (!name || name.length === 0 || !money || money.length === 0 || parseInt(money) < 0) {
      $('#cancel-edit-participant').after('<p id="warn_in_participant_modal" style="color:red"> Не все поля заполненны верно! </p>');
    } else {
      var form = $('#form-edit-participant');
      form.attr({
        method: 'post',
        action: '/participants/edit/' + id
      });
      form.submit();
    }
  });
}

function getParticipantById(id, participants) {
  var _iterator2 = _createForOfIteratorHelper(participants),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var participant = _step2.value;

      if (participant.id == id) {
        return participant;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
'use strict';

$(document).ready(function () {
  $.get('/settings/Data', function (res) {
    fillFields(res);
    addEditListeners(res);
  });
});

function fillFields(res) {
  var settings = res.settings;
  $('#date-settings-label').text("\u0414\u0430\u0442\u0430 \u0430\u0443\u043A\u0446\u0438\u043E\u043D\u0430: ".concat(settings.date));
  $('#time-settings-label').text("\u0412\u0440\u0435\u043C\u044F \u043D\u0430\u0447\u0430\u043B\u0430 \u0430\u0443\u043A\u0446\u0438\u043E\u043D\u0430:    ".concat(settings.time_start));
  $('#timeout-settings-label').text("\u0422\u0430\u0439\u043C\u0430\u0443\u0442 \u043F\u0440\u043E\u0434\u0430\u0436\u0438 \u043A\u0430\u0440\u0442\u0438\u043D\u044B:    ".concat(settings.timeout));
  $('#interval-settings-label').text("\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B \u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u043E\u0442\u0441\u0447\u0435\u0442\u0430:    ".concat(settings.interval));
  $('#pause-settings-label').text("\u041F\u0430\u0443\u0437\u0430 \u043D\u0430 \u0438\u0437\u0443\u0447\u0435\u043D\u0438\u0435 \u043A\u0430\u0440\u0442\u0438\u043D\u044B:   ".concat(settings.pause));
}

function addEditListeners(res) {
  $('#edit-settings-button').on('click', function () {
    var warn = $('#warn_in_settings'); //убираем сообщение об ошибке если оно есть

    if (warn) {
      warn.detach();
    }

    var settings = res.settings;
    $('#view-settings-mode').hide();
    $('#edit-settings-mode').css('display', 'block');
    $('#settings-input-date').val(settings.date);
    $('#settings-input-time').val(settings.time_start);
    $('#settings-input-interval').val(settings.interval);
    $('#settings-input-pause').val(settings.pause);
    $('#settings-input-timeout').val(settings.timeout);
  });
  $('#cancel-settings-button').on('click', function () {
    $('#view-settings-mode').css('display', 'block');
    $('#edit-settings-mode').hide();
  });
  $('#ok-settings-button').on('click', function () {
    var warn = $('#warn_in_settings');

    if (warn) {
      warn.detach();
    }

    var date = $('#settings-input-date').val();
    var time_start = $('#settings-input-time').val();
    var interval = $('#settings-input-interval').val();
    var pause = $('#settings-input-pause').val();
    var timeout = $('#settings-input-timeout').val();

    if (checkCorrectSettings(date, time_start, interval, pause, timeout)) {
      var form = $('#form-edit-settings');
      form.attr({
        method: 'post',
        action: '/settings/edit'
      });
      form.submit();
    } else {
      $('#cancel-settings-button').after("<p style=\"color:red\" id=\"warn_in_settings\"> \u041D\u0435 \u0432\u0441\u0435 \u043F\u043E\u043B\u044F \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u044B \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E! </p>");
    }
  });
}

function checkCorrectSettings(date, time_start, interval, pause, timeout) {
  return date && time_start && interval && pause && timeout && date.length != 0 && time_start.length != 0 && interval.length != 0 && pause != 0 && timeout != 0;
}
'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var pictures;
$(document).ready(function () {
  $('#modal').fadeOut(0);
  $.get('/picturesData', function (res) {
    fillTable(res);
    addListeners();
    addDeleteContext();
    addNewPictureListeners();
  });
});

function fillTable(res) {
  pictures = [];

  if (res.status !== 404) {
    pictures = res.pictures;
  } else {
    pictures = [];
  }

  var table = $('#body_table');

  var _iterator = _createForOfIteratorHelper(pictures),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var pic = _step.value;
      //добавляем данные в таблицу
      var in_auction = void 0;

      if (pic.in_auction) {
        in_auction = 'Да';
      } else {
        in_auction = 'Нет';
      }

      table.append("<tr> \n                         <td class=\"id\">".concat(pic.id, "</td>   \n                         <td><img class=\"image-in-table\" src=").concat(pic.src, " alt=").concat(pic.name, "></td>\n                         <td>").concat(pic.name, "</td>\n                         <td >").concat(pic.author, "</td>\n                         <td>").concat(pic.start_price, "</td>\n                         <td>").concat(in_auction, "</td></tr>"));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function addListeners() {
  $('#body_table tr').click(function () {
    var id = $(this).find('.id').text();
    var pic = getPicture(id);
    $('#img_in_modal').attr('src', pic.src);
    $('.img-div').click(function () {
      $('.big-img').attr('src', pic.src);
      $('.big-div').fadeIn(500);
    });
    $('#h2_name_picture').text("".concat(pic.name));
    $('#author_in_modal').text("\u0410\u0432\u0442\u043E\u0440: ".concat(pic.author));
    $('#start_price_in_modal').text("\u041D\u0430\u0447\u0430\u043B\u044C\u043D\u0430\u044F \u0446\u0435\u043D\u0430: ".concat(pic.start_price));
    $('#min_step_in_modal').text("\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u0448\u0430\u0433: ".concat(pic.min_step));
    $('#max_step_in_modal').text("\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u0448\u0430\u0433: ".concat(pic.max_step));
    $('#description_in_modal').text("\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435: ".concat(pic.description));
    var in_auction;

    if (pic.in_auction) {
      in_auction = 'Да';
    } else {
      in_auction = 'Нет';
    }

    $('#in_auction_in_modal').text('Учавствует в аукционе: ' + in_auction);
    addEditButtonListener(pic);
    openModal();
  });
}

function getPicture(id) {
  var _iterator2 = _createForOfIteratorHelper(pictures),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var pic = _step2.value;

      if (pic.id == id) {
        return pic;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  throw 'not found picture';
}

function openModal() {
  $('.view-picture').css('display', 'block');
  $('.edit-picture').css('display', 'none');
  $('#modal').fadeOut(1111);
  $('#modal').fadeIn(300);
}

function addEditButtonListener(pic) {
  $('#edit-image').click(function () {
    $("#input_picture_name").val(pic.name);
    $("#input_picture_author").val(pic.author);
    $('#input_description').val(pic.description);
    $('#input_in_auction').attr('checked', pic.in_auction);
    $('#input_min_step').val(pic.min_step);
    $('#input_max_step').val(pic.max_step);
    $('#input_start_price').val(pic.start_price);
    $('#input_picture_src').attr('value', 'Файл не выбран');
    $('.view-picture').css('display', 'none');
    $('.edit-picture').css('display', 'block');
    addCancelButtonListener();
    addOkButtonListener(pic);
    $('#div_warn').css('display', 'none');
  });
}

function addCancelButtonListener() {
  $('#cancel').on('click', function () {
    $('.edit-picture').css('display', 'none');
    $('.view-picture').css('display', 'block');
    $('#div-warn').css('display', 'none');
  });
}

function addOkButtonListener(pic) {
  $('#ok').on('click', function () {
    $('#div-warn').css('display', 'none');
    var name = $('#input_picture_name').val();
    var author = $('#input_picture_author').val();
    var description = $('#input_description').val();
    var price = $('#input_start_price').val();
    var min_step = $('#input_min_step').val();
    var max_step = $('#input_max_step').val();
    var src = $('#input_picture_src').val();

    if (checkCorrectData(pic, name, author, description, price, min_step, max_step, src)) {
      var form = $('#form_edit_picture');
      form.attr('action', '/auction/edit/picture/' + pic.id);
      form.attr('method', 'post');
      form.submit(); //отправляем картинку

      if (src !== undefined && src.length !== 0) {
        loadImage('./auction/edit/picture/img/' + pic.id);
      }
    } else {
      $('#div-warn').css('display', 'block');
    }
  });
}

function addDeleteContext() {
  $('#body_table tr').contextmenu(function (event) {
    event.preventDefault(); //запрещаем стандартное меню

    $('.right-click-menu').css({
      display: 'block',
      top: "".concat(event.clientY, "px"),
      left: "".concat(event.clientX, "px")
    });
    var id = $(this).find('.id').text();
    $('#button_menuitem').on('click', function () {
      var form = $('#delete_form');
      form.attr('method', 'post');
      form.attr('action', '/auction/delete/picture/' + id);
      form.submit();
    });
  });
  $('body').click(function () {
    $('.right-click-menu').css('display', 'none');
  }); //при клике лкм скрыть контекстное меню
}

function addNewPictureListeners() {
  $('#button_add_new_picture').on('click', function () {
    $('#label_img_src').val('Изображение: ');
    $('.close-span').css('display', 'none');
    $('.view-picture').hide();
    $('.edit-picture').css('display', 'block');
    $('#ok').hide();
    $('#cancel').hide();
    $('#ok_new_picture').css('display', 'block');
    $('#cancel_new_picture').css('display', 'block');
    $('#modal').fadeIn(300);
    $('#div-warn').css('display', 'none');
  });
  $('#cancel_new_picture').on('click', function () {
    $('#label_img_src').val('Изображение (если нужно поменять):');
    $('.close-span').css('display', 'block');
    $('.view-picture').css('display', 'block');
    $('.edit-picture').hide();
    $('#ok_new_picture').hide();
    $('#cancel_new_picture').hide();
    $('#ok').css('display', 'block');
    $('#cancel').css('display', 'block');
    $('#modal').fadeOut(1);
    $('#div-warn').css('display', 'none');
  });
  $('#ok_new_picture').on('click', function () {
    var name = $('#input_picture_name').val();
    var author = $('#input_picture_author').val();
    var description = $('#input_description').val();
    var price = $('#input_start_price').val();
    var min_step = $('#input_min_step').val();
    var max_step = $('#input_max_step').val();
    var src = $('#input_picture_src').val();

    if (checkCorrectData('', name, author, description, price, min_step, max_step) && src !== undefined && src.length !== 0) {
      var form = $('#form_edit_picture');
      form.attr('method', 'post');
      form.attr('action', '/auction/add/picture');
      form.submit();
      loadImage('/auction/add/picture/img');
    } else {
      $('#div-warn').css('display', 'block');
    }
  });
}

function checkCorrectData(pic, name, author, description, price, min_step, max_step) {
  if (name.length === 0 || author.length === 0 || description.length === 0 || price.length === 0 || min_step.length === 0 || max_step.length === 0) {
    return false;
  }

  return true;
}

function loadImage(url) {
  var data = new FormData();
  data.append('file', $('#input_picture_src')[0].files[0]);
  $.ajax({
    url: url,
    type: 'POST',
    data: data,
    cache: false,
    dataType: 'json',
    processData: false,
    //отключаем обработку передаваемых данных
    contentType: false,
    //отключаем установку загаловка, т.к. jq скажет серверу что это строковый запрос
    success: function success(msg) {
      if (msg.error != '') {
        alert('Не удалось загрузить изображение');
        console.log('error img');
      }
    }
  });
}